我叫xxxx，来自于xxxxx，本科毕业于湖南科技学院，大学学的专业是信息与计算科学，现在已经有6年多的工作经验。有扎实的java基础，熟悉mysql、redis另外orcle、pgsql、ES数据库也都用过，理解事务机制。有过sql优化经验。

对于当前主流的技术框架都有过了解与实践，比如说微服务、消息中间件、缓存等。对于jvm内存结构和juc并发编程也有过研究。

我最近完成的项目是：

华为智能汽车crm管理系统：该项目主要是对企业销售人员提供客户管理的服务。我在该项目中担任客户&客户关系小组的项目PL 其中管理工作主要负责项目迭代计划管理、每日早会、项目代码检视、项目上线checkList、上线后的总结回顾。另外开发工作主要是客户活动/客户计划、客户洞察等模块。

主要用到的技术是灵雀平台 + Springboot、mybatis、pgsql、redis、ES、rabbitMq。

使用mybtais作为持久层框架，对于复杂的查询我们采用的是sql的形式，对于一些简单的增加更改操作我们使用的是MybatisPlus，简化开发，同时使用Redis作为我们的缓存数据库，使用rabbitmq中间件来进行数据的传递、解耦处理。  

在该项目中有解决过慢sql问题，当时是客户新闻的需求的迭代二出现的。迭代二开发直接把同一个接口给到了另外一个场景使用 ，没有做需求分析。后面我们做版本回顾主要有三个原因：第一BA在需求交接的时候没有告知开发生产环境数据量的大小。第二 开发自己没有考虑性能问题，需求分析没有做到位。第三：测试场景不到位。

解决办法：

拆分业务，将列表查询跟卡片查询区分开。

优化业务逻辑，将分页查询需要的数据量总数跟数据并行查询。

优化sql：去掉不需要的查询字段，连表查询时候小表驱动大表，添加覆盖索引。

另外在项目中有根据CSA思想以及redis分布式锁 设计实现过分布式客户NUMBER。

先查询number是否存在，不存在则利用redis上锁并且设置过期时间，上锁成功则查询当前数据库number的最大值。并且在修改前再次确认锁存在。

如果上锁失败则 自旋等待500ms再次获取 且设置自旋次数。

最后成功则释放锁，失败则抛出自定义异常。
